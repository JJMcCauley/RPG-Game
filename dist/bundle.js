/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Enemy.js":
/*!**********************!*\
  !*** ./src/Enemy.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\nconst EnemyStats = __webpack_require__(/*! ./EnemyStats */ \"./src/EnemyStats.js\");\r\nconst { randomNumberGenerator } = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\r\n\r\nclass Enemy {\r\n  constructor(name, index, number = 1) {\r\n    this.name = library.masterEnemyList[name].name;\r\n    this.stats = new EnemyStats(name);\r\n    this.damage = 0;\r\n    this.status = \"attacking!\";\r\n    this.index = `${this.name}-${index}`;\r\n    this.number = number;\r\n    this.img = library.masterEnemyList[name].img;\r\n    this.initiative = 0;\r\n    this.isEnemy = true;\r\n  }\r\n\r\n  get alive() {\r\n    if (this.currentHP <= 0) {\r\n      return false;\r\n    } else return true;\r\n  }\r\n\r\n  get attacks() {\r\n    const attacks = {};\r\n    const attackList = library.masterEnemyList[this.name].attacks;\r\n    for (let i = 0; i < attackList.length; i++) {\r\n      attacks[attackList[i]] = library.masterSkillList[attackList[i]];\r\n    }\r\n    return attacks;\r\n  }\r\n\r\n  get attack() {\r\n    return this.attacks[\"bash\"];\r\n  }\r\n\r\n  get currentHP() {\r\n    return this.stats.maxHP - this.damage;\r\n  }\r\n  get gold() {\r\n    return randomNumberGenerator(this.stats.goldMin, this.stats.goldMax);\r\n  }\r\n\r\n  get encounterName() {\r\n    return `${this.name} ${this.number}`;\r\n  }\r\n\r\n  get healthState() {\r\n    const healthPercent = this.currentHP / this.stats.maxHP;\r\n    if (healthPercent === 1) {\r\n      return `is <span class='green'>perfectly healthy</span>.`;\r\n    } else if (healthPercent >= 0.75) {\r\n      return `is <span class='green'>slightly wounded</span>.`;\r\n    } else if (healthPercent >= 0.5) {\r\n      return `is <span class='yellow'>wounded and breathing heavily</span>.`;\r\n    } else if (healthPercent >= 0.25) {\r\n      return `is <span class='orange'>grievously wounded</span>.`;\r\n    } else if (healthPercent > 0) {\r\n      return `is <span class='red'>struggling to stay standing</span>.`;\r\n    } else {\r\n      return `has <span class='red'>been defeated</span>.`;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Enemy;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/Enemy.js?");

/***/ }),

/***/ "./src/EnemyStats.js":
/*!***************************!*\
  !*** ./src/EnemyStats.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\n\r\nclass EnemyStats {\r\n  constructor(name) {\r\n    this.maxHP = library.masterEnemyList[name].maxHP;\r\n    this.defense = library.masterEnemyList[name].defense;\r\n    this.magicDefense = library.masterEnemyList[name].magicDefense;\r\n    this.speed = library.masterEnemyList[name].speed;\r\n    this.exp = library.masterEnemyList[name].exp;\r\n    this.goldMin = library.masterEnemyList[name].goldMin;\r\n    this.goldMax = library.masterEnemyList[name].goldMax;\r\n  }\r\n}\r\n\r\nmodule.exports = EnemyStats;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/EnemyStats.js?");

/***/ }),

/***/ "./src/Item.js":
/*!*********************!*\
  !*** ./src/Item.js ***!
  \*********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\n\r\nclass Item {\r\n  constructor(name, category, subcategory = null) {\r\n    this.name = name;\r\n    this.type = library.masterItemList[category][subcategory][name].type;\r\n    this.weight = library.masterItemList[category][subcategory][name].weight;\r\n    this.description = library.masterItemList[category][subcategory][name].desc;\r\n    if (subcategory === \"weapons\") {\r\n      this.hands = library.masterItemList[category][subcategory][name].hands;\r\n      this.attack = library.masterItemList[category][subcategory][name].attack;\r\n      this.damage = library.masterItemList[category][subcategory][name].damage;\r\n      this.dmgRange =\r\n        library.masterItemList[category][subcategory][name].dmgRange;\r\n      if (library.masterItemList[category][subcategory][name].defense) {\r\n        this.defense =\r\n          library.masterItemList[category][subcategory][name].defense;\r\n      }\r\n      if (library.masterItemList[category][subcategory][name].evasion) {\r\n        this.evasion =\r\n          library.masterItemList[category][subcategory][name].evasion;\r\n      }\r\n      if (library.masterItemList[category][subcategory][name].specialEffects) {\r\n        this.specialEffects =\r\n          library.masterItemList[category][subcategory][name].specialEffects;\r\n      }\r\n      this.equippable = true;\r\n      this.equipped = false;\r\n    } else if (subcategory === \"armor\") {\r\n      this.defense =\r\n        library.masterItemList[category][subcategory][name].defense;\r\n      this.evasion =\r\n        library.masterItemList[category][subcategory][name].evasion;\r\n      this.magicDefense =\r\n        library.masterItemList[category][subcategory][name].magicDefense;\r\n      if (library.masterItemList[category][subcategory][name].specialEffects) {\r\n        this.specialEffects =\r\n          library.masterItemList[category][subcategory][name].specialEffects;\r\n      }\r\n      this.equippable = true;\r\n      this.equipped = false;\r\n    }\r\n  }\r\n\r\n  generateItem() {\r\n    const item = new Item(\r\n      this.name,\r\n      this.type,\r\n      this.weight,\r\n      this.description,\r\n      this.attack,\r\n      this.attackRange,\r\n      this.defense,\r\n      this.evasion,\r\n      this.equippable,\r\n      this.equipped,\r\n      this.specialEffects\r\n    );\r\n    return item;\r\n  }\r\n}\r\n\r\nmodule.exports = Item;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/Item.js?");

/***/ }),

/***/ "./src/Job.js":
/*!********************!*\
  !*** ./src/Job.js ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\nconst Item = __webpack_require__(/*! ./Item */ \"./src/Item.js\");\r\n\r\nclass Job {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.startingHP = library.masterJobList[name].startingHP;\r\n    this.startingMP = library.masterJobList[name].startingMP;\r\n    this.startingStr = library.masterJobList[name].startingStr;\r\n    this.startingDex = library.masterJobList[name].startingDex;\r\n    this.startingSpeed = library.masterJobList[name].startingSpeed;\r\n    this.startingSta = library.masterJobList[name].startingSta;\r\n    this.startingInt = library.masterJobList[name].startingInt;\r\n    this.startingLuck = library.masterJobList[name].startingLuck;\r\n    this.heaviestEquipment = library.masterJobList[name].heaviestEquipment;\r\n    this.startingEquipment = library.masterJobList[name].startingEquipment;\r\n    this.img = library.masterJobList[name].img;\r\n    this.hasSpells = library.masterJobList[name].hasSpells;\r\n    this.hasAbilities = library.masterJobList[name].hasAbilities;\r\n  }\r\n\r\n  get spells() {\r\n    if (this.hasSpells) {\r\n      return library.masterJobList[this.name].spells;\r\n    } else return \"none\";\r\n  }\r\n\r\n  get startingArmor() {\r\n    const armor = new Item(this.startingEquipment.armor, \"equipment\", \"armor\");\r\n    return armor;\r\n  }\r\n\r\n  get startingWeapon() {\r\n    const weapon = new Item(\r\n      this.startingEquipment.weapon,\r\n      \"equipment\",\r\n      \"weapons\"\r\n    );\r\n    return weapon;\r\n  }\r\n}\r\n\r\nmodule.exports = Job;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/Job.js?");

/***/ }),

/***/ "./src/Party.js":
/*!**********************!*\
  !*** ./src/Party.js ***!
  \**********************/
/***/ ((module) => {

eval("class Party {\r\n  constructor(members) {\r\n    this.members = members;\r\n    this.gold = 0;\r\n    this.exp = 0;\r\n    this.inventory = [];\r\n  }\r\n}\r\n\r\nmodule.exports = Party;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/Party.js?");

/***/ }),

/***/ "./src/PlayerCharacter.js":
/*!********************************!*\
  !*** ./src/PlayerCharacter.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Job = __webpack_require__(/*! ./Job */ \"./src/Job.js\");\r\nconst PlayerStats = __webpack_require__(/*! ./PlayerStats */ \"./src/PlayerStats.js\");\r\nconst {\r\n  getMasterSpellList,\r\n  randomNumberGenerator,\r\n  isEven,\r\n} = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\r\n\r\nclass PlayerCharacter {\r\n  constructor(name, gender, job) {\r\n    this.name = name;\r\n    this.level = 3;\r\n    this.gender = gender;\r\n    this.job = new Job(job);\r\n    this.equipment = {\r\n      weapon: this.job.startingWeapon,\r\n      helmet: \"none\",\r\n      armor: this.job.startingArmor,\r\n      accessory: \"none\",\r\n    };\r\n    this.stats = new PlayerStats(this.job);\r\n    this.status = \"none\";\r\n    this.isEnemy = false;\r\n    this.damage = 0;\r\n    this.spentMP = 0;\r\n    this.initiative = 0;\r\n    this.currentlyCasting = \"\";\r\n  }\r\n\r\n  get alive() {\r\n    if (this.currentHP <= 0) {\r\n      return false;\r\n    } else return true;\r\n  }\r\n\r\n  get attack() {\r\n    let damage = 0;\r\n    let randomInt = randomNumberGenerator(1, 10);\r\n    let attack = this.equipment.weapon.damage;\r\n    if (isEven(randomInt)) {\r\n      attack += randomNumberGenerator(0, this.equipment.weapon.dmgRange);\r\n    } else {\r\n      attack -= randomNumberGenerator(0, this.equipment.weapon.dmgRange);\r\n    }\r\n    if (this.equipment.weapon.weight === \"light\") {\r\n      damage = Math.round((2 * attack + 2 * this.stats.dex) / 3);\r\n    } else {\r\n      damage = Math.round((2 * attack + this.stats.str) / 3);\r\n    }\r\n    if (damage > 1) return damage;\r\n    else return 1;\r\n  }\r\n\r\n  get magicAttack() {\r\n    let damage = 0;\r\n    let randomInt = randomNumberGenerator(1, 10);\r\n    const spell = this.currentlyCasting;\r\n    let magicAttack = spell.baseDamage + this.level;\r\n    if (isEven(randomInt)) {\r\n      magicAttack += randomNumberGenerator(0, spell.damageRange);\r\n    } else {\r\n      magicAttack -= randomNumberGenerator(0, spell.damageRange);\r\n    }\r\n    damage = Math.round((2 * magicAttack + this.stats.int) / 3);\r\n    if (damage > 1) return damage;\r\n    else return 1;\r\n  }\r\n\r\n  get currentHP() {\r\n    return this.stats.maxHP - this.damage;\r\n  }\r\n\r\n  get currentMP() {\r\n    return this.stats.maxMP - this.spentMP;\r\n  }\r\n\r\n  set partyIndex(party) {\r\n    for (let i = 0; i < party.members.length; i++) {\r\n      if (party.members[i].name === this.name) {\r\n        this._partyIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  get partyIndex() {\r\n    return this._partyIndex;\r\n  }\r\n\r\n  get pronoun() {\r\n    if (this.gender === \"male\") {\r\n      return \"he\";\r\n    } else if (this.gender === \"female\") {\r\n      return \"she\";\r\n    } else if (this.gender === \"non-binary\") {\r\n      return \"they\";\r\n    }\r\n  }\r\n\r\n  get spells() {\r\n    if (this.job.hasSpells) {\r\n      const spellList = [];\r\n      for (let spellLevel in this.job.spells) {\r\n        for (let i = 0; i < this.job.spells[spellLevel].length; i++) {\r\n          if (parseInt(spellLevel) <= this.level) {\r\n            spellList.push(this.job.spells[spellLevel][i]);\r\n          }\r\n        }\r\n      }\r\n      if (spellList.length >= 1) {\r\n        const spellObjects = [];\r\n        for (let i = 0; i < spellList.length; i++) {\r\n          const newSpell = getMasterSpellList().filter(\r\n            (magSpell) => magSpell.name === spellList[i]\r\n          );\r\n          spellObjects.push(newSpell[0]);\r\n        }\r\n        return spellObjects;\r\n      } else return `${capitalizeWord(this.name)} knows no spells yet.`;\r\n    } else return `${capitalizeWord(this.name)} has no spells.`;\r\n  }\r\n\r\n  get hasOffensiveSpells() {\r\n    if (typeof this.spells !== \"string\") {\r\n      for (let i = 0; i < this.spells.length; i++) {\r\n        if (this.spells[i].type === \"offensive\") {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } else return false;\r\n  }\r\n\r\n  get hasSupportSpells() {\r\n    if (typeof this.spells !== \"string\") {\r\n      for (let i = 0; i < this.spells.length; i++) {\r\n        if (this.spells[i].type === \"support\") {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } else return false;\r\n  }\r\n\r\n  equipGear(gear) {\r\n    if (gear.type === \"melee weapon\" || \"ranged weapon\") {\r\n      this.equipment.weapon = gear;\r\n    } else {}\r\n    gear.equipped = true;\r\n  }\r\n\r\n  removeGear(gear) {\r\n    if (gear.name !== \"bare hands\") {\r\n      if (gear.type === \"melee weapon\" || \"ranged weapon\") {\r\n        this.equipment.weapon = masterItemList.weapons.bareHands.generateItem();\r\n      } else {}\r\n      gear.equipped = false;\r\n      party.inventory.push(gear);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = PlayerCharacter;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/PlayerCharacter.js?");

/***/ }),

/***/ "./src/PlayerStats.js":
/*!****************************!*\
  !*** ./src/PlayerStats.js ***!
  \****************************/
/***/ ((module) => {

eval("class PlayerStats {\r\n  constructor(job) {\r\n    this.job = job;\r\n    this.maxHP = this.job.startingHP;\r\n    this.maxMP = this.job.startingMP;\r\n    this.str = this.job.startingStr;\r\n    this.dex = this.job.startingDex;\r\n    this.speed = this.job.startingSpeed;\r\n    this.sta = this.job.startingSta;\r\n    this.int = this.job.startingInt;\r\n    this.luck = this.job.startingLuck;\r\n  }\r\n}\r\n\r\nmodule.exports = PlayerStats;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/PlayerStats.js?");

/***/ }),

/***/ "./src/Spell.js":
/*!**********************!*\
  !*** ./src/Spell.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\n\r\nclass Spell {\r\n  constructor(spellName) {\r\n    this.name = spellName;\r\n    this.type = library.masterSpellList[spellName].type;\r\n    this.target = library.masterSpellList[spellName].target;\r\n    this.shortDesc = library.masterSpellList[spellName].shortDesc;\r\n    if (library.masterSpellList[spellName].hpDamage) {\r\n      this.baseDamage = library.masterSpellList[spellName].hpDamage;\r\n      this.damageRange = library.masterSpellList[spellName].damageRange;\r\n    }\r\n    if (library.masterSpellList[spellName].hpHeal) {\r\n      this.baseHeal = library.masterSpellList[spellName].hpHeal;\r\n    }\r\n    this.mpCost = library.masterSpellList[spellName].mpCost;\r\n    this.speed = library.masterSpellList[spellName].speed;\r\n    if (library.masterSpellList[spellName].specialEffects) {\r\n      this.specialEffects = library.masterSpellList[spellName].specialEffects;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Spell;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/Spell.js?");

/***/ }),

/***/ "./src/combat.js":
/*!***********************!*\
  !*** ./src/combat.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Enemy = __webpack_require__(/*! ./Enemy */ \"./src/Enemy.js\");\r\nconst library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\nconst renderScreen = __webpack_require__(/*! ./screenRender */ \"./src/screenRender.js\");\r\nconst {\r\n  capitalizeWord,\r\n  randomNumberGenerator,\r\n  getMasterSpellList,\r\n  damageFormula,\r\n} = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\r\n\r\nconst startCombat = (party) => {\r\n  renderScreen(library.screens.battle);\r\n  let exp = 0;\r\n  let gold = 0;\r\n  const enemyArea = document.querySelector(\"#enemy-area\");\r\n  const commands = document.querySelector(\"#commands\");\r\n  const combatLog = document.querySelector(\"#combat-log\");\r\n  const currentArea = \"area1\";\r\n  const encounterSize = getEncounterSize();\r\n  const currentEncounter = {};\r\n  currentEncounter.enemies = getEnemies(currentArea, encounterSize);\r\n  currentEncounter.playerParty = [...party.members];\r\n  currentEncounter.whole = [\r\n    ...currentEncounter.enemies,\r\n    ...currentEncounter.playerParty,\r\n  ];\r\n  console.log(currentEncounter);\r\n  console.log(currentEncounter.playerParty);\r\n  let msg;\r\n\r\n  setPartyIndex();\r\n\r\n  initializeInitiative();\r\n  showParty();\r\n  enemyArrival();\r\n  printMessage(msg);\r\n  displayEnemies();\r\n  msg = '<p class=\"turqoise\">What would you like to do?</p>';\r\n  printMessage(msg);\r\n  getPreCombatInput();\r\n\r\n  commands.addEventListener(\"click\", (e) => {\r\n    if (e.target.type === \"button\") {\r\n      if (e.target.id === \"start-battle-btn\") {\r\n        clearCommands();\r\n        getNextTurn();\r\n      } else if (e.target.id === \"flee-battle-btn\") {\r\n        clearCommands();\r\n        clearEnemyArea();\r\n        msg = `<p><span class=\"player\">The party</span> has successfully fled the encounter!</span>!</p>`;\r\n        printMessage(msg);\r\n        commands.innerHTML = `<button type='button' id='next' class='btn btn-danger col-3'>Next</button>`;\r\n      } else if (e.target.id === \"attack-btn\") {\r\n        playerAttack(\"attack\");\r\n      } else if (e.target.id === \"magic-btn\") {\r\n        chooseMagicType();\r\n      } else if (e.target.id.indexOf(\"attack-enemy\") >= 0) {\r\n        processAttack(e.target.dataset.target, \"attack\");\r\n      } else if (e.target.id === \"back\") {\r\n        clearCommands();\r\n        getCombatInput();\r\n      } else if (e.target.id === \"next\") {\r\n        renderScreen(library.screens.postBattle);\r\n        postCombat(party);\r\n      } else if (e.target.id.indexOf(\"spell\") === 0) {\r\n        clearCommands();\r\n        processMagicSpell(e.target.dataset.spellName);\r\n      } else if (e.target.id === \"back-spells\") {\r\n        clearCommands();\r\n        chooseMagicType();\r\n      } else if (e.target.id.indexOf(\"cast-enemy\") === 0) {\r\n        const target = e.target.id.slice(11);\r\n        const spell = e.target.dataset.spell;\r\n        console.log(\r\n          `${currentEncounter.characterUp.name} casts ${spell} on ${target}`\r\n        );\r\n        castOffensiveSpell(spell, target);\r\n      } else if ((e.target.id === \"cast-friendly\") === 0) {\r\n        console.log(e.target.id);\r\n      } else if (e.target.id === \"support-magic-btn\") {\r\n        playerMagic(\"support\");\r\n      } else if (e.target.id === \"offensive-magic-btn\") {\r\n        playerMagic(\"offensive\");\r\n      }\r\n    }\r\n  });\r\n\r\n  function setPartyIndex() {\r\n    for (let member of party.members) {\r\n      member.partyIndex = party;\r\n    }\r\n  }\r\n\r\n  function chooseMagicType() {\r\n    let magicHtml = \"\";\r\n    if (\r\n      currentEncounter.characterUp.hasOffensiveSpells &&\r\n      currentEncounter.characterUp.hasSupportSpells\r\n    ) {\r\n      magicHtml += `\r\n                            <div class='col-3 command'>\r\n                                <button type=\"button\" id=\"support-magic-btn\" class=\"mt-3 btn btn-magic-support\">Support Magic</button>                                   \r\n                            </div>\r\n                            <div class='col-3 command'>                                    \r\n                                <button type=\"button\" id=\"offensive-magic-btn\" class=\"mt-3 btn btn-magic-offensive\">Offensive Magic</button>\r\n                            </div>\r\n                        `;\r\n      magicHtml += `\r\n                        <div class='col-3 command'>\r\n                            <button type=\"button\" id=\"back\" class=\"mt-3 btn btn-info\">Back</button>\r\n                        </div>`;\r\n      commands.innerHTML = magicHtml;\r\n    } else playerMagic();\r\n  }\r\n\r\n  function endEncounter() {\r\n    printMessage(\r\n      `<span class='tomato'><p>Enemies</span> <span class='red'>defeated!</span><p>`\r\n    );\r\n    printMessage(\r\n      `<p><span class=\"player\">The party</span> earns <span class='gold'>${gold} gold</span> and <span class='exp'>${exp} experience points</span>!</p>`\r\n    );\r\n    party.gold += gold;\r\n    party.exp += exp;\r\n    printMessage(\r\n      `<p><span class=\"player\">The party</span> has a total of <span class='gold'>${party.gold} gold</span> and <span class='exp'>${party.exp} experience points</span>!</p>`\r\n    );\r\n    clearCommands();\r\n    clearEnemyArea();\r\n    commands.innerHTML = `<button type='button' id='next' class='btn btn-danger col-3'>Next</button>`;\r\n  }\r\n\r\n  function checkEnemyDeath(enemy) {\r\n    if (enemy.currentHP <= 0) {\r\n      enemy.status = \"dead.\";\r\n      exp += enemy.stats.exp;\r\n      gold += enemy.gold;\r\n    }\r\n    displayEnemies();\r\n  }\r\n\r\n  function encounterOverBool() {\r\n    currentEncounter.aliveEnemies = [];\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      if (currentEncounter.enemies[i].alive) {\r\n        currentEncounter.aliveEnemies.push(currentEncounter.enemies[i]);\r\n      }\r\n    }\r\n    if (currentEncounter.aliveEnemies.length > 0) {\r\n      return false;\r\n    } else return true;\r\n  }\r\n\r\n  function endPlayerTurn() {\r\n    clearCommands();\r\n    getNextTurn();\r\n  }\r\n\r\n  function castOffensiveSpell(spellName, targetName) {\r\n    const spell = getMasterSpellList().filter(\r\n      (spell) => spell.name === spellName\r\n    )[0];\r\n    const target = currentEncounter.enemies.filter(\r\n      (enemy) => enemy.encounterName === targetName\r\n    )[0];\r\n    const caster = currentEncounter.characterUp;\r\n    let dmg = -1;\r\n    if (spell.baseDamage) {\r\n      caster.currentlyCasting = spell;\r\n      dmg = damageFormula(caster.magicAttack, target.stats.magicDefense);\r\n      target.damage += dmg;\r\n      msg = `<p><span class = \"player\">${\r\n        currentEncounter.characterUp.name\r\n      }</span> casts <span class='exp'>${\r\n        spell.name\r\n      }</span> on <span class='tomato'>${capitalizeWord(\r\n        target.encounterName\r\n      )}</span> for <span class='orange'>${dmg}</span> points of <span class='red'>damage</span>!</p>`;\r\n      printMessage(msg);\r\n      msg = `\r\n            <p>The <span class=tomato>${target.name}</span> ${target.healthState}</p>\r\n            `;\r\n      printMessage(msg);\r\n    } else {\r\n      msg = `<p><span class = \"player\">${\r\n        currentEncounter.characterUp.name\r\n      }</span> casts <span class='exp'>${\r\n        spell.name\r\n      }</span> on <span class='tomato'>${capitalizeWord(\r\n        target.encounterName\r\n      )}</span>.</p>`;\r\n      printMessage(msg);\r\n    }\r\n\r\n    console.log(spell.specialEffects);\r\n\r\n    if (spell.specialEffects === \"slow\") {\r\n      msg = `\r\n                <p>The <span class=tomato>${target.name}</span> has been <span class='exp'>slowed</span>.</p>\r\n            `;\r\n      printMessage(msg);\r\n    }\r\n\r\n    checkEnemyDeath(target);\r\n    if (!encounterOverBool()) {\r\n      endPlayerTurn();\r\n    } else {\r\n      endEncounter();\r\n    }\r\n  }\r\n\r\n  function displayToolTip(element) {\r\n    const target = element.parentElement;\r\n    target.classList.add(\"tooltip-container\");\r\n    const tooltip = document.getElementById(\r\n      `${element.dataset.spellName}-tooltip-text`\r\n    );\r\n    tooltip.style.display = \"block\";\r\n  }\r\n\r\n  function removeToolTip(element) {\r\n    const target = element.parentElement;\r\n    target.classList.remove(\"tooltip-container\");\r\n    const tooltip = document.getElementById(\r\n      `${element.dataset.spellName}-tooltip-text`\r\n    );\r\n    tooltip.style.display = \"none\";\r\n  }\r\n\r\n  function getEnemy(name) {\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      if (currentEncounter.enemies[i].encounterName === name)\r\n        return currentEncounter.enemies[i];\r\n    }\r\n  }\r\n\r\n  function processAttack(enemyName, attackType) {\r\n    const enemy = getEnemy(enemyName);\r\n    if (attackType === \"attack\") {\r\n      const attack = currentEncounter.characterUp.attack;\r\n      const damage = damageFormula(attack, enemy.stats.defense);\r\n      enemy.damage += damage;\r\n      printMessage(\r\n        `<p><span class='player'>${currentEncounter.characterUp.name}</span> hits <span class='tomato'>${enemy.name}</span> for <span class='orange'>${damage}</span> points of <span class='red'>damage</span>!</p>`\r\n      );\r\n    }\r\n    msg = `\r\n            <p>The <span class=tomato>${enemy.name}</span> ${enemy.healthState}</p>\r\n        `;\r\n    printMessage(msg);\r\n    checkEnemyDeath(enemy);\r\n    if (!encounterOverBool()) {\r\n      endPlayerTurn();\r\n    } else {\r\n      endEncounter();\r\n    }\r\n  }\r\n\r\n  function processMagicSpell(spellName) {\r\n    let spellcastHTML = \"\";\r\n    const spell = getMasterSpellList().filter(\r\n      (spellObj) => spellObj.name === spellName\r\n    )[0];\r\n    const caster = currentEncounter.characterUp;\r\n    console.log(spell);\r\n    if (spell.type === \"offensive\") {\r\n      for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n        if (currentEncounter.enemies[i].alive) {\r\n          spellcastHTML += `\r\n                                        <div class='col-3 command mt-3'>\r\n                                            <button type=\"button\" id=\"cast-enemy-${\r\n                                              currentEncounter.enemies[i]\r\n                                                .encounterName\r\n                                            }\" data-target=\"${\r\n            currentEncounter.enemies[i].encounterName\r\n          }\" class=\"btn btn-magic\" data-spell=\"${spellName}\">${capitalizeWord(\r\n            currentEncounter.enemies[i].encounterName\r\n          )}</button>\r\n                                        </div>\r\n                                    `;\r\n        }\r\n      }\r\n    }\r\n    spellcastHTML += `\r\n                            <div class='col-3 command'>\r\n                                <button type=\"button\" id=\"back-spells\" class=\"mt-3 btn btn-info\">Back</button>\r\n                            </div>\r\n                        `;\r\n    commands.innerHTML = spellcastHTML;\r\n  }\r\n\r\n  function clearEnemyArea() {\r\n    enemyArea.innerHTML = \"\";\r\n  }\r\n\r\n  function clearCommands() {\r\n    commands.innerHTML = \"\";\r\n  }\r\n\r\n  function enemyArrival() {\r\n    if (currentEncounter.enemies.length > 1) {\r\n      msg = `\r\n                <p>${currentEncounter.enemies.length} <span class='tomato'>enemies</span> have arrived!</p>\r\n            `;\r\n    } else if (currentEncounter.enemies.length === 1) {\r\n      msg = `\r\n                <p>${currentEncounter.enemies.length} <span class='tomato'>enemy</span> has arrived!</p>\r\n            `;\r\n    }\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      msg += `\r\n                <p>A <span class='tomato'>${currentEncounter.enemies[i].name}</span> is here!</p>\r\n            `;\r\n    }\r\n  }\r\n\r\n  function getEncounterSize() {\r\n    const randomNumber = randomNumberGenerator(1, 100);\r\n    if (randomNumber >= 75) {\r\n      return 3;\r\n    } else if (randomNumber >= 50) {\r\n      return 1;\r\n    } else {\r\n      return 2;\r\n    }\r\n  }\r\n\r\n  function getCurrentEnemies(enemyList, enemyPartySize) {\r\n    const enemies = [];\r\n    for (let i = 0; i < enemyPartySize; i++) {\r\n      const enemyIndex = randomNumberGenerator(0, enemyList.length - 1);\r\n      const currentEnemy = enemyList[enemyIndex];\r\n      currentEnemy.index = i;\r\n      enemies.push(enemyList[enemyIndex]);\r\n    }\r\n    return enemies;\r\n  }\r\n\r\n  function getEnemies(area, encounterSize) {\r\n    const potentialEnemies = library.enemiesByArea[area];\r\n    const enemyList = getCurrentEnemies(potentialEnemies, encounterSize);\r\n    const enemies = [];\r\n    const enemiesInEncounter = [];\r\n    for (let i = 0; i < enemyList.length; i++) {\r\n      let enemyNamed = false;\r\n      let enemy = `${enemyList[i]}-1`;\r\n      while (enemyNamed === false) {\r\n        if (!enemiesInEncounter.includes(enemy)) {\r\n          enemiesInEncounter.push(enemy);\r\n          enemyNamed = true;\r\n        } else {\r\n          const sameEnemyIndex = parseInt(enemy.slice(-1));\r\n          enemy = `${enemyList[i]}-${sameEnemyIndex + 1}`;\r\n        }\r\n      }\r\n      enemies.push(new Enemy(enemyList[i], i, parseInt(enemy.slice(-1))));\r\n    }\r\n    return enemies;\r\n  }\r\n\r\n  function getNextTurn() {\r\n    let nextFound = false;\r\n    do {\r\n      let highestInit = 0;\r\n      for (let i = 0; i < currentEncounter.whole.length; i++) {\r\n        if (currentEncounter.whole[i].alive) {\r\n          const ticRate = randomNumberGenerator(1, 10);\r\n          const currentCharacter = currentEncounter.whole[i];\r\n          currentCharacter.currentEncounterIndex = i;\r\n          currentCharacter.initiative += ticRate + currentCharacter.stats.speed;\r\n          if (\r\n            currentCharacter.initiative >= 100 &&\r\n            currentCharacter.initiative > highestInit\r\n          ) {\r\n            highestInit = currentCharacter.initiative;\r\n            nextFound = true;\r\n            currentEncounter.characterUp = currentCharacter;\r\n          }\r\n        }\r\n      }\r\n    } while (!nextFound);\r\n    removeDivFocus();\r\n    if (currentEncounter.characterUp.isEnemy) {\r\n      divFocus(\r\n        document.querySelector(\r\n          `[data-name=\"${currentEncounter.characterUp.encounterName}\"]`\r\n        )\r\n      );\r\n    } else {\r\n      divFocus(\r\n        document.querySelector(\r\n          `[data-name=\"${currentEncounter.characterUp.name}\"]`\r\n        )\r\n      );\r\n    }\r\n    takeTurn();\r\n  }\r\n\r\n  function initializeInitiative() {\r\n    for (let i = 0; i < currentEncounter.whole.length; i++) {\r\n      currentEncounter.whole[i].initiative = 0;\r\n    }\r\n  }\r\n\r\n  function displayEnemies() {\r\n    const enemyList = [];\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      if (currentEncounter.enemies[i].alive) {\r\n        enemyList.push(currentEncounter.enemies[i]);\r\n      }\r\n    }\r\n    let imgHtml = \"\";\r\n    enemyArea.innerHTML = imgHtml;\r\n    if (enemyList.length === 1) {\r\n      let i = 0;\r\n      imgHtml = `<div data-name='${\r\n        enemyList[i].encounterName\r\n      }' class='col-${4} center enemy-div'><img src='${enemyList[i].img}'>`;\r\n      imgHtml += `<p class='white enemy-status'>${capitalizeWord(\r\n        enemyList[i].encounterName\r\n      )}</p>`;\r\n      imgHtml += `<p class='white enemy-status'>HP: ${enemyList[i].currentHP}/${enemyList[i].stats.maxHP}</p>`;\r\n      imgHtml += `</div >`;\r\n    } else if (enemyList.length >= 2) {\r\n      for (let i = 0; i < enemyList.length; i++) {\r\n        imgHtml += `<div data-name='${enemyList[i].encounterName}' class='col-${\r\n          12 / enemyList.length\r\n        } center enemy-div'><img src='${enemyList[i].img}'>`;\r\n        imgHtml += `<p class='white enemy-status'>${capitalizeWord(\r\n          enemyList[i].encounterName\r\n        )}</p>`;\r\n        imgHtml += `<p class='white enemy-status'>HP: ${enemyList[i].currentHP}/${enemyList[i].stats.maxHP}</p>`;\r\n        imgHtml += `</div >`;\r\n      }\r\n    }\r\n    enemyArea.insertAdjacentHTML(\"beforeend\", imgHtml);\r\n  }\r\n\r\n  function playerAttack() {\r\n    clearCommands();\r\n    let enemyHtml = \"\";\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      if (currentEncounter.enemies[i].alive) {\r\n        enemyHtml += `\r\n                                <div class='col-3 command mt-3'>\r\n                                    <button type=\"button\" id=\"attack-enemy-${\r\n                                      currentEncounter.enemies[i].encounterName\r\n                                    }\" data-target=\"${\r\n          currentEncounter.enemies[i].encounterName\r\n        }\" class=\"btn btn-danger\">${capitalizeWord(\r\n          currentEncounter.enemies[i].encounterName\r\n        )}</button>\r\n                                </div>\r\n                            `;\r\n      }\r\n    }\r\n    enemyHtml += `\r\n                        <div class='col-3 command'>\r\n                            <button type=\"button\" id=\"back\" class=\"mt-3 btn btn-info\">Back</button>\r\n                        </div>\r\n                    `;\r\n    commands.innerHTML = enemyHtml;\r\n  }\r\n\r\n  function playerMagic(spellType = \"all\") {\r\n    clearCommands();\r\n    let magicHtml = ``;\r\n    if (spellType === \"all\") {\r\n      for (let i = 0; i < currentEncounter.characterUp.spells.length; i++) {\r\n        const spell = currentEncounter.characterUp.spells[i];\r\n        console.log(spell);\r\n        magicHtml += `\r\n                    <div class='col-3 command mt-3'>\r\n                        <p id=\"${\r\n                          spell.name\r\n                        }-tooltip-text\" class='tooltip-text'>${\r\n          spell.shortDesc\r\n        }</p>\r\n                        <button type='button' id='spell-${\r\n                          spell.name\r\n                        }' data-spell-name='${\r\n          spell.name\r\n        }' class='btn btn-magic spell'>${capitalizeWord(spell.name)}</btn>\r\n                    </div>\r\n                `;\r\n      }\r\n    } else if (spellType === \"support\") {\r\n      for (let i = 0; i < currentEncounter.characterUp.spells.length; i++) {\r\n        const spell = currentEncounter.characterUp.spells[i];\r\n        if (spell.type === \"support\") {\r\n          magicHtml += `\r\n                        <div class='col-3 command mt-3'>\r\n                            <p id=\"${\r\n                              spell.name\r\n                            }-tooltip-text\" class='tooltip-text'>${\r\n            spell.shortDesc\r\n          }</p>\r\n                            <button type='button' id='spell-${\r\n                              spell.name\r\n                            }' data-spell-name='${\r\n            spell.name\r\n          }' class='btn btn-magic spell'>${capitalizeWord(spell.name)}</btn>\r\n                        </div>\r\n                    `;\r\n        }\r\n      }\r\n    } else if (spellType === \"offensive\") {\r\n      for (let i = 0; i < currentEncounter.characterUp.spells.length; i++) {\r\n        const spell = currentEncounter.characterUp.spells[i];\r\n        if (spell.type === \"offensive\") {\r\n          magicHtml += `\r\n                        <div class='col-3 command mt-3'>\r\n                            <p id=\"${\r\n                              spell.name\r\n                            }-tooltip-text\" class='tooltip-text'>${\r\n            spell.shortDesc\r\n          }</p>\r\n                            <button type='button' id='spell-${\r\n                              spell.name\r\n                            }' data-spell-name='${\r\n            spell.name\r\n          }' class='btn btn-magic spell'>${capitalizeWord(spell.name)}</btn>\r\n                        </div>\r\n                    `;\r\n        }\r\n      }\r\n    }\r\n\r\n    magicHtml += `\r\n                        <div class='col-3 command'>\r\n                            <button type=\"button\" id=\"back\" class=\"mt-3 btn btn-info\">Back</button>\r\n                        </div>`;\r\n    commands.innerHTML = magicHtml;\r\n    const spells = document.querySelectorAll(\".spell\");\r\n    for (let i = 0; i < spells.length; i++) {\r\n      spells[i].addEventListener(\"mouseover\", (e) => {\r\n        displayToolTip(e.target);\r\n      });\r\n      spells[i].addEventListener(\"mouseleave\", (e) => {\r\n        removeToolTip(e.target);\r\n      });\r\n    }\r\n  }\r\n\r\n  function getPreCombatInput() {\r\n    const startBattleBtn = `\r\n                                    <div class='col-3 command'>\r\n                                        <button type=\"button\" id=\"start-battle-btn\" class=\"mt-3 btn btn-danger\">Start Battle!</button>\r\n                                    </div>\r\n                                `;\r\n    commands.insertAdjacentHTML(\"beforeend\", startBattleBtn);\r\n    const fleeBtn = `\r\n                            <div class='col-3 command'>\r\n                                <button type=\"button\" id=\"flee-battle-btn\" class=\"mt-3 btn btn-warning\">Flee Battle!</button>\r\n                            </div>\r\n                        `;\r\n    commands.insertAdjacentHTML(\"beforeend\", fleeBtn);\r\n  }\r\n\r\n  function getCombatInput() {\r\n    const attack = `\r\n                            <div class='col-3 command'>\r\n                                <button type=\"button\" id=\"attack-btn\" class=\"mt-3 btn btn-danger\">Attack!</button>\r\n                            </div>\r\n                        `;\r\n    commands.insertAdjacentHTML(\"beforeend\", attack);\r\n    if (\r\n      currentEncounter.characterUp.job.hasSpells &&\r\n      currentEncounter.characterUp.spells.length > 0\r\n    ) {\r\n      const magic = `\r\n                            <div class='col-3 command'>\r\n                                <button type=\"button\" id=\"magic-btn\" class=\"mt-3 btn btn-magic\">Use Magic!</button>\r\n                            </div>\r\n                        `;\r\n      commands.insertAdjacentHTML(\"beforeend\", magic);\r\n    }\r\n  }\r\n\r\n  function takeTurn() {\r\n    currentEncounter.characterUp.initiative = 0;\r\n    if (party.members.includes(currentEncounter.characterUp)) {\r\n      getCombatInput();\r\n    } else {\r\n      msg = `<p><span class='tomato'>${capitalizeWord(\r\n        currentEncounter.characterUp.name\r\n      )}</span> attacks</span> <span class='player'>${\r\n        party.members[randomNumberGenerator(0, 3)].name\r\n      }</span> for <span class='orange'>${\r\n        currentEncounter.characterUp.attack.damage\r\n      }</span> points of <span class='red'>damage</span>!</p>`;\r\n      printMessage(msg);\r\n      getNextTurn();\r\n    }\r\n  }\r\n\r\n  function enemyStatus() {\r\n    for (let i = 0; i < currentEncounter.enemies.length; i++) {\r\n      const enemy = currentEncounter.enemies[i];\r\n      msg = `\r\n            <p><span class=tomato>${capitalizeWord(enemy.name)}</span> is ${\r\n        enemy.status\r\n      } The <span class=tomato>${enemy.name}</span> ${enemy.healthState}</p>\r\n        `;\r\n      printMessage(msg);\r\n    }\r\n  }\r\n\r\n  function scrollToBottom() {\r\n    combatLog.scrollTop = combatLog.scrollHeight;\r\n  }\r\n\r\n  function showParty() {\r\n    const partyDiv = document.querySelector(\"#party\");\r\n    let html = \"\";\r\n    for (let i = 0; i < currentEncounter.playerParty.length; i++) {\r\n      const character = party.members[i];\r\n      html += `\r\n                <div data-name=\"${character.name}\" data-index=\"${\r\n        character.partyIndex\r\n      }\" class=\"card player-card col-3 p-3 text-center\">\r\n                    <img src=\"${\r\n                      character.job.img\r\n                    }\" class=\"class-img card-img-top mx-auto\" alt=\"...\">\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">${capitalizeWord(\r\n                          character.name\r\n                        )}</h5>\r\n                        <p class=\"card-text\"><span class=\"player\">HP</span>: ${\r\n                          character.stats.maxHP\r\n                        }/${character.currentHP}</p>\r\n                        <p class=\"card-text\"><span class=\"exp\">MP</span>: ${\r\n                          character.stats.maxMP\r\n                        }/${character.currentMP}</p>\r\n                    </div>\r\n                </div>\r\n            `;\r\n    }\r\n    partyDiv.innerHTML = html;\r\n  }\r\n\r\n  function printMessage(message) {\r\n    combatLog.insertAdjacentHTML(\"beforeend\", message);\r\n    scrollToBottom();\r\n  }\r\n\r\n  function divFocus(div) {\r\n    div.style.border = \".5em solid rgb(63, 226, 210)\";\r\n  }\r\n\r\n  function removeDivFocus() {\r\n    const combatantDivs = document.querySelectorAll(`[data-name]`);\r\n    for (let i = 0; i < combatantDivs.length; i++) {\r\n      combatantDivs[i].style.border = \"inherit\";\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = startCombat;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/combat.js?");

/***/ }),

/***/ "./src/gameLogic.js":
/*!**************************!*\
  !*** ./src/gameLogic.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const startCombat = __webpack_require__(/*! ./combat */ \"./src/combat.js\");\r\n\r\nconst startGame = (party) => {\r\n  startCombat(party);\r\n};\r\n\r\nmodule.exports = startGame;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/gameLogic.js?");

/***/ }),

/***/ "./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Spell = __webpack_require__(/*! ./Spell */ \"./src/Spell.js\");\r\nconst library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\n\r\nfunction capitalizeWord(word) {\r\n  return `${word[0].toUpperCase()}${word.slice(1)}`;\r\n}\r\n\r\nfunction damageFormula(attack, defense) {\r\n  const dmg = Math.round(attack * (100 / (100 + defense)));\r\n  const msg = `\r\n                    Attack Value: ${attack}\r\n                    Defense Value: ${defense}\r\n                    Total Damage: ${dmg}\r\n    `;\r\n  console.log(msg);\r\n  return dmg;\r\n}\r\n\r\nfunction isEven(number) {\r\n  if (number % 2 === 0) return true;\r\n  else return false;\r\n}\r\n\r\nfunction getScript(scriptLocation) {\r\n  return library.script[scriptLocation];\r\n}\r\n\r\nfunction randomNumberGenerator(min, max) {\r\n  // Returns a random integer from 1 to 10:\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction getMasterSpellList() {\r\n  const spellList = [];\r\n  for (let spell in library.masterSpellList) {\r\n    const newSpell = new Spell(spell);\r\n    spellList.push(newSpell);\r\n  }\r\n  return spellList;\r\n}\r\n\r\nmodule.exports = {\r\n  capitalizeWord,\r\n  damageFormula,\r\n  isEven,\r\n  getMasterSpellList,\r\n  getScript,\r\n  randomNumberGenerator,\r\n};\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/helper.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\nconst Party = __webpack_require__(/*! ./Party */ \"./src/Party.js\");\r\nconst PlayerCharacter = __webpack_require__(/*! ./PlayerCharacter */ \"./src/PlayerCharacter.js\");\r\nconst intro = __webpack_require__(/*! ./intro */ \"./src/intro.js\");\r\nconst startGame = __webpack_require__(/*! ./gameLogic */ \"./src/gameLogic.js\");\r\n\r\nconst defaultParty = [\r\n  new PlayerCharacter(\"Phen\", \"male\", library.jobArray[0]),\r\n  new PlayerCharacter(\"Nia\", \"female\", library.jobArray[1]),\r\n  new PlayerCharacter(\"Codan\", \"male\", library.jobArray[2]),\r\n  new PlayerCharacter(\"Vielna\", \"female\", library.jobArray[3]),\r\n];\r\n\r\nlet party = new Party(defaultParty);\r\n\r\nintro(party)\r\n  .then((updatedParty) => {\r\n    party = updatedParty;\r\n    startGame(party);\r\n    // Continue with the next part of the code here\r\n  })\r\n  .catch((error) => {\r\n    // Handle any errors that occurred during the intro() function\r\n    console.error(error);\r\n  });\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/index.js?");

/***/ }),

/***/ "./src/intro.js":
/*!**********************!*\
  !*** ./src/intro.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const renderScreen = __webpack_require__(/*! ./screenRender */ \"./src/screenRender.js\");\r\nconst library = __webpack_require__(/*! ./libraries */ \"./src/libraries.js\");\r\nconst PlayerCharacter = __webpack_require__(/*! ./PlayerCharacter */ \"./src/PlayerCharacter.js\");\r\nconst { capitalizeWord } = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\r\n\r\nfunction intro(party) {\r\n  return new Promise((resolve, reject) => {\r\n    renderScreen(library.screens.intro);\r\n    const introDiv = document.querySelector(\"#intro-div\");\r\n    const partySize = 4;\r\n    let namedIndex = 0;\r\n    const tempParty = [];\r\n    const sprites = [\r\n      library.masterJobList.hero.img,\r\n      library.masterJobList.warrior.img,\r\n      library.masterJobList.thief.img,\r\n      library.masterJobList.witch.img,\r\n    ];\r\n\r\n    introDiv.addEventListener(\"click\", (e) => {\r\n      if (e.target.type === \"button\") {\r\n        if (e.target.id === \"start-game\") {\r\n          resolve(party);\r\n        } else if (e.target.id === \"start-naming\") {\r\n          startNaming();\r\n        }\r\n      }\r\n    });\r\n\r\n    function startNaming() {\r\n      introDiv.innerHTML = library.screens.nameParty;\r\n      const spriteBox = document.querySelector(\"#naming-sprite\");\r\n      spriteBox.innerHTML = `<img src=\"./${sprites[namedIndex]}\" />`;\r\n      const nameInput = document.querySelector(\"#character-name-input\");\r\n      nameInput.focus();\r\n      introDiv.addEventListener(\"click\", (e) => {\r\n        if (e.target.type === \"button\") {\r\n          if (e.target.id === \"name-character\" && nameInput.value !== \"\") {\r\n            nameCharacter(nameInput.value);\r\n          } else if (e.target.id === \"party-confirmed\") {\r\n            party.members = [...tempParty];\r\n            resolve(party);\r\n          } else if (e.target.id === \"party-rename\") {\r\n            tempParty.length = 0;\r\n            namedIndex = 0;\r\n            nameInput.value = \"\";\r\n            introDiv.innerHTML = \"\";\r\n            startNaming();\r\n          }\r\n        }\r\n      });\r\n\r\n      nameInput.addEventListener(\"keyup\", (e) => {\r\n        if (e.key === \"Enter\" && nameInput.value !== \"\" && namedIndex < 4) {\r\n          nameCharacter(nameInput.value);\r\n        }\r\n      });\r\n\r\n      function nameCharacter(name) {\r\n        const label = document.querySelector(\"#character-label\");\r\n        const nameBtn = document.querySelector(\"#name-character\");\r\n        tempParty.push(\r\n          new PlayerCharacter(\r\n            name,\r\n            document.querySelector(\"input:checked\").value,\r\n            library.jobArray[namedIndex]\r\n          )\r\n        );\r\n        namedIndex++;\r\n        if (namedIndex < partySize) {\r\n          spriteBox.innerHTML = `<img src=\"./${sprites[namedIndex]}\" />`;\r\n          nameInput.value = \"\";\r\n          nameInput.focus();\r\n          label.textContent = library.script.intro.getName[namedIndex];\r\n          document.querySelector(\"#radioHe\").checked = true;\r\n          nameBtn.textContent = \"Name Your Friend\";\r\n        } else {\r\n          showConfirmation();\r\n        }\r\n\r\n        function showConfirmation() {\r\n          let html = `\r\n                            <div id=\"party-confirmation\" class=\"text-center\">\r\n                                <h2 class=\"turqoise mb-3\">Are you happy with this party?</h2>\r\n                        `;\r\n          spriteBox.innerHTML = \"\";\r\n          for (let i = 0; i < tempParty.length; i++) {\r\n            let toBe = \"is\";\r\n            if (tempParty[i].pronoun === \"they\") {\r\n              toBe = \"are\";\r\n            }\r\n            html += `\r\n                                <p><span class=\"green\">${capitalizeWord(\r\n                                  tempParty[i].name\r\n                                )}</span> the <span class=\"exp\">${capitalizeWord(\r\n              tempParty[i].job.name\r\n            )}</span>, <span class=\"blue\">${\r\n              tempParty[i].pronoun\r\n            } ${toBe}</span> ready for an adventure!</p> \r\n                            `;\r\n          }\r\n          html += `\r\n                            </div>\r\n                            <div id=\"character-confirmation-buttons\" class=\"mt-5\">\r\n                                <button id=\"party-confirmed\" type='button' class='col-4 btn btn-success'>Let's go!</button><button id=\"party-rename\" type='button' class='col-4 btn btn-warning'>Rename Party</button>\r\n                            </div>                \r\n                        `;\r\n          introDiv.innerHTML = html;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = intro;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/intro.js?");

/***/ }),

/***/ "./src/libraries.js":
/*!**************************!*\
  !*** ./src/libraries.js ***!
  \**************************/
/***/ ((module) => {

eval("const library = {\r\n  masterEnemyList: {\r\n    bugbear: {\r\n      name: \"bugbear\",\r\n      maxHP: 20,\r\n      maxMP: 6,\r\n      attacks: [\"bash\"],\r\n      defense: 5,\r\n      magicDefense: 5,\r\n      speed: 3,\r\n      exp: 5,\r\n      goldMin: 15,\r\n      goldMax: 20,\r\n      img: \"img/bugbear.png\",\r\n    },\r\n    goblin: {\r\n      name: \"goblin\",\r\n      maxHP: 12,\r\n      maxMP: 5,\r\n      attacks: [\"bash\"],\r\n      defense: 4,\r\n      magicDefense: 3,\r\n      speed: 6,\r\n      exp: 2,\r\n      goldMin: 8,\r\n      goldMax: 12,\r\n      img: \"img/goblin.png\",\r\n    },\r\n    slime: {\r\n      name: \"slime\",\r\n      maxHP: 8,\r\n      maxMP: 2,\r\n      attacks: [\"bash\"],\r\n      defense: 3,\r\n      magicDefense: 8,\r\n      speed: 3,\r\n      exp: 3,\r\n      goldMin: 0,\r\n      goldMax: 4,\r\n      img: \"img/slime.png\",\r\n    },\r\n    spider: {\r\n      name: \"spider\",\r\n      maxHP: 9,\r\n      maxMP: 8,\r\n      attacks: [\"bash\"],\r\n      defense: 3,\r\n      magicDefense: 3,\r\n      speed: 7,\r\n      exp: 3,\r\n      goldMin: 0,\r\n      goldMax: 3,\r\n      img: \"img/spider.png\",\r\n    },\r\n    wolf: {\r\n      name: \"wolf\",\r\n      maxHP: 14,\r\n      maxMP: 4,\r\n      attacks: [\"bash\"],\r\n      defense: 3,\r\n      magicDefense: 4,\r\n      speed: 4,\r\n      exp: 5,\r\n      goldMin: 0,\r\n      goldMax: 5,\r\n      img: \"img/wolf.png\",\r\n    },\r\n  },\r\n\r\n  enemiesByArea: {\r\n    area1: [\"bugbear\", \"goblin\", \"slime\", \"spider\", \"wolf\"],\r\n    area2: [\"wolf\"],\r\n  },\r\n\r\n  masterSkillList: {\r\n    bash: {\r\n      name: \"bash\",\r\n      attack: 6,\r\n      damage: 6,\r\n      damageRng: 3,\r\n      choiceWeight: 0,\r\n      speed: \"medium\",\r\n    },\r\n  },\r\n\r\n  masterSpellList: {\r\n    familiar: {\r\n      name: \"familiar\",\r\n      type: \"support\",\r\n      target: \"self\",\r\n      shortDesc:\r\n        \"Summons a familiar that attacks on its own every time the character has a turn\",\r\n      mpCost: 4,\r\n      speed: \"medium\",\r\n      specialEffects:\r\n        \"does a certain amount of damage to a random enemy when the user takes a turn\",\r\n    },\r\n    fire: {\r\n      name: \"fire\",\r\n      type: \"offensive\",\r\n      target: \"enemy\",\r\n      shortDesc:\r\n        \"Burns the target in a fiery inferno that can leave the foe burnt\",\r\n      hpDamage: 12,\r\n      damageRange: 3,\r\n      mpCost: 4,\r\n      speed: \"medium\",\r\n      specialEffects: \"has a chance to burn the enemy\",\r\n    },\r\n    heal: {\r\n      name: \"heal\",\r\n      type: \"support\",\r\n      target: \"friendly\",\r\n      shortDesc: `Heal's target for a small amount`,\r\n      hpHeal: 12,\r\n      mpCost: 4,\r\n      speed: \"medium\",\r\n    },\r\n    lightning: {\r\n      name: \"lightning\",\r\n      type: \"offensive\",\r\n      target: \"enemy\",\r\n      shortDesc: \"Calls nature's galvanizing fury down upon an enemy.\",\r\n      hpDamage: 8,\r\n      damageRange: 7,\r\n      mpCost: 4,\r\n      speed: \"medium\",\r\n      specialEffects:\r\n        \"hits other enemies for less damage, every enemy hit has to make a save or have their initiative lowered, the amount of initiative lowered and difficulty of check is based on amount of damage taken\",\r\n    },\r\n    slow: {\r\n      name: \"slow\",\r\n      type: \"offensive\",\r\n      target: \"enemy\",\r\n      shortDesc: \"Lowers an enemy's speed by a small amount\",\r\n      mpCost: 4,\r\n      speed: \"medium\",\r\n      specialEffects: \"slow\",\r\n    },\r\n  },\r\n\r\n  masterItemList: {\r\n    equipment: {\r\n      weapons: {\r\n        bareHands: {\r\n          name: \"bare hands\",\r\n          type: \"melee\",\r\n          weight: \"light\",\r\n          hands: 2,\r\n          desc: \"A hardy pair of fists, although it's hard to cause as much damage without a weapon some prefer to fight without one as it leaves them unecumbered to more easily dodge enemy attacks.\",\r\n          attack: 6,\r\n          damage: 3,\r\n          dmgRange: 2,\r\n          evasion: 3,\r\n          specialEffects: [\"raises evasion slightly\"],\r\n        },\r\n        ironDagger: {\r\n          name: \"iron dagger\",\r\n          type: \"melee\",\r\n          weight: \"light\",\r\n          hands: 1,\r\n          desc: \"A dagger that was made for skinning animal carcasses that is now being employed as a weapon of war.\",\r\n          attack: 8,\r\n          damage: 5,\r\n          dmgRange: 2,\r\n          critRate: 1.5,\r\n          specialEffects: [\"raises rate of critical attacks moderately\"],\r\n        },\r\n        oldIronSword: {\r\n          name: \"old iron sword\",\r\n          type: \"melee\",\r\n          weight: \"medium\",\r\n          hands: 1,\r\n          desc: \"An old iron sword that's seen better days, although it still maintains an edge.\",\r\n          attack: 6,\r\n          damage: 9,\r\n          dmgRange: 4,\r\n        },\r\n        rustedBattleAxe: {\r\n          name: \"rusted battle axe\",\r\n          type: \"melee\",\r\n          weight: \"heavy\",\r\n          hands: 2,\r\n          desc: \"An axe from an ancient war that hasn't seen maintenance in awhile... It can cause heavy damage and be used defensively although it's awkward weight makes it unwieldy\",\r\n          attack: 4,\r\n          damage: 10,\r\n          dmgRange: 3,\r\n          defense: 5,\r\n          specialEffects: [\"raises defense slightly\"],\r\n        },\r\n        woodenBow: {\r\n          name: \"wooden bow\",\r\n          type: \"range\",\r\n          weight: \"light\",\r\n          hands: 2,\r\n          desc: \"A durable wooden bow that unto now had been primarily used in the hunting of wild game.\",\r\n          attack: 10,\r\n          damage: 6,\r\n          dmgRange: 5,\r\n          evasion: 3,\r\n          critRate: 1.3,\r\n          specialEffects: [\r\n            \"raises evasion slightly\",\r\n            \"raises crit rate slightly \",\r\n          ],\r\n        },\r\n        woodenStaff: {\r\n          name: \"bare hands\",\r\n          type: \"melee\",\r\n          weight: \"light\",\r\n          hands: 2,\r\n          desc: \"A hardy pair of fists, although it's hard to cause as much damage without a weapon some prefer to fight without one as it leaves them unecumbered to more easily dodge enemy attacks.\",\r\n          attack: 6,\r\n          damage: 4,\r\n          evasion: 3,\r\n          defense: 3,\r\n          specialEffects: [\"raises evasion slightly\"],\r\n        },\r\n      },\r\n      helmets: {},\r\n      armor: {\r\n        curedLeatherJerkin: {\r\n          name: \"cured leather jerkin\",\r\n          type: \"armor\",\r\n          weight: \"heavy\",\r\n          desc: \"Stiff and difficult to move in, but it can protect its wearer from clawing talons and biting fangs.\",\r\n          defense: 5,\r\n          evasion: 3,\r\n          magicDefense: 2,\r\n        },\r\n        quiltedJerkin: {\r\n          name: \"quilted jerkin\",\r\n          type: \"armor\",\r\n          weight: \"medium\",\r\n          desc: \"Although a bit uncomfortable and scratchy, this armor provides a moderate amount of protection as well as ease of movement.\",\r\n          defense: 3,\r\n          evasion: 4,\r\n          magicDefense: 3,\r\n        },\r\n        travelersRobe: {\r\n          name: \"traveler's robe\",\r\n          type: \"armor\",\r\n          weight: \"light\",\r\n          desc: \"A simple traveler's robe meant to protect one from the elements. Has become favored by those gifted with majikal abilities as it allows for the free movement of the limbs required for the arcane motions used to conjure majiks.\",\r\n          defense: 1,\r\n          evasion: 5,\r\n          magicDefense: 5,\r\n        },\r\n      },\r\n      shield: {},\r\n      accessories: {},\r\n    },\r\n  },\r\n\r\n  masterJobList: {\r\n    hero: {\r\n      name: \"hero\",\r\n      startingHP: 14,\r\n      startingMP: 6,\r\n      startingStr: 5,\r\n      startingDex: 6,\r\n      startingSpeed: 5,\r\n      startingSta: 4,\r\n      startingInt: 5,\r\n      startingLuck: 7,\r\n      startingEquipment: {\r\n        weapon: \"oldIronSword\",\r\n        armor: \"quiltedJerkin\",\r\n        shield: \"\",\r\n      },\r\n      heaviestEquipment: \"medium\",\r\n      img: \"img/hero.png\",\r\n      hasSpells: true,\r\n      hasAbilities: true,\r\n      spells: {\r\n        2: [\"heal\"],\r\n      },\r\n    },\r\n    thief: {\r\n      name: \"thief\",\r\n      startingHP: 12,\r\n      startingMP: 8,\r\n      startingStr: 3,\r\n      startingDex: 8,\r\n      startingSpeed: 8,\r\n      startingSta: 3,\r\n      startingInt: 4,\r\n      startingLuck: 8,\r\n      startingEquipment: {\r\n        weapon: \"woodenBow\",\r\n        armor: \"quiltedJerkin\",\r\n        shield: \"\",\r\n      },\r\n      heaviestEquipment: \"medium\",\r\n      img: \"img/thief.png\",\r\n      hasSpells: true,\r\n      hasAbilities: true,\r\n      spells: {\r\n        3: [\"slow\", \"fire\"],\r\n      },\r\n    },\r\n    warrior: {\r\n      name: \"warrior\",\r\n      startingHP: 20,\r\n      startingMP: 0,\r\n      startingStr: 9,\r\n      startingDex: 5,\r\n      startingSpeed: 3,\r\n      startingSta: 6,\r\n      startingInt: 2,\r\n      startingLuck: 3,\r\n      startingEquipment: {\r\n        weapon: \"rustedBattleAxe\",\r\n        armor: \"curedLeatherJerkin\",\r\n        shield: \"\",\r\n      },\r\n      heaviestEquipment: \"heavy\",\r\n      img: \"img/warrior.png\",\r\n      hasSpells: false,\r\n      hasAbilities: true,\r\n    },\r\n    witch: {\r\n      name: \"witch\",\r\n      startingHP: 8,\r\n      startingMP: 14,\r\n      startingStr: 1,\r\n      startingDex: 4,\r\n      startingSpeed: 6,\r\n      startingSta: 4,\r\n      startingInt: 10,\r\n      startingLuck: 4,\r\n      startingEquipment: {\r\n        weapon: \"woodenStaff\",\r\n        armor: \"curedLeatherJerkin\",\r\n        shield: \"\",\r\n      },\r\n      heaviestEquipment: \"light\",\r\n      img: \"img/witch.png\",\r\n      hasSpells: true,\r\n      hasAbilities: false,\r\n      spells: {\r\n        1: [\"fire\"],\r\n        2: [\"familiar\"],\r\n        3: [\"lightning\", \"heal\"],\r\n      },\r\n    },\r\n  },\r\n\r\n  jobArray: [\"hero\", \"warrior\", \"thief\", \"witch\"],\r\n\r\n  screens: {\r\n    intro: `\r\n            <div class=\"d-flex justify-content-center align-items-center vh-100\">\r\n              <div id=\"intro-screen\" class=\"container p-1 position-relative\">\r\n                  <div id='naming-sprite' class=\"position-absolute\">\r\n                  </div>\r\n                  <div id='intro-div' class=\"m-2 row center position-absolute top-50 start-50 translate-middle\">\r\n                      <div class=\"col-3 d-flex flex-column\">\r\n                        <button type=\"button\" id=\"start-naming\" class=\"m-2 btn btn-success\">Name Your Party</button>\r\n                        <button type=\"button\" id=\"start-game\" class=\"m-2 btn btn-info\">Skip Naming</button>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n        `,\r\n\r\n    nameParty: `\r\n                <label for=\"character-name\" id='character-label' class=\"text-center col-12\">Please enter the main hero's name!</label>\r\n                <div id='character-name-div'>\r\n                    <input name='character-name' class=\"col-3 m-1\" id=\"character-name-input\"></input>\r\n                    <div id=\"radio-div\" class=\"m-1 col-3\">\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"genderOptions\" id=\"radioHe\" value=\"male\" checked>\r\n                            <label class=\"form-check-label\" for=\"inlineRadio1\">He</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"genderOptions\" id=\"radioShe\" value=\"female\">\r\n                            <label class=\"form-check-label\" for=\"inlineRadio2\">She</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"genderOptions\" id=\"radioThey\" value=\"non-binary\">\r\n                            <label class=\"form-check-label\" for=\"inlineRadio3\">They</label>\r\n                        </div>\r\n                    </div>\r\n                </div>                \r\n                <button type=\"button\" id=\"name-character\" class=\"col-3 m-1 btn btn-success\">Name Yourself</button>\r\n                \r\n            `,\r\n\r\n    battle: `\r\n                <div id='combat-screen' class=\"container p-3\">\r\n                    <div id=\"enemy-area\" class=\"row mt-1 p-1\">\r\n\r\n                    </div>\r\n                    <div id=\"combat-log\" class=\"row p-5 text-center\">\r\n\r\n                    </div>\r\n                    <div id=\"party\" class=\"row\">\r\n\r\n                    </div>\r\n                    <div id=\"commands\" class=\"row mt-3\">\r\n\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n    postBattle: `\r\n                <div id=\"post-combat-screen\" class=\"container p-1 position-relative\">\r\n                    <div id='intro-div' class=\"row center position-absolute top-50 start-50 translate-middle\">\r\n                        <button type=\"button\" id=\"next-combat\" class=\"btn btn-info col-4\">Seek Out an Enemy</button>\r\n                    </div>\r\n                </div>\r\n            `,\r\n  },\r\n\r\n  script: {\r\n    intro: {\r\n      getName: [\r\n        `Please enter the main hero's name!`,\r\n        `Name your strong, tough friend!`,\r\n        `Name your tricky, deft-handed friend!`,\r\n        `Name your friend with a mysterious presence!`,\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nmodule.exports = library;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/libraries.js?");

/***/ }),

/***/ "./src/screenRender.js":
/*!*****************************!*\
  !*** ./src/screenRender.js ***!
  \*****************************/
/***/ ((module) => {

eval("function renderScreen(screen) {\r\n  const main = document.querySelector(\".main\");\r\n  main.innerHTML = screen;\r\n}\r\n\r\nmodule.exports = renderScreen;\r\n\n\n//# sourceURL=webpack://rpg_combat/./src/screenRender.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;